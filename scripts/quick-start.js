#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Dark Pool DEX Quick Start');
console.log('============================\n');

async function runCommand(command, description) {
  console.log(`üìã ${description}...`);
  try {
    const output = execSync(command, { encoding: 'utf8', stdio: 'pipe' });
    console.log(`‚úÖ ${description} completed successfully`);
    return output;
  } catch (error) {
    console.error(`‚ùå ${description} failed:`, error.message);
    throw error;
  }
}

async function checkPrerequisites() {
  console.log('üîç Checking prerequisites...\n');
  
  // Check if .env file exists
  if (!fs.existsSync('.env')) {
    console.log('‚ö†Ô∏è  .env file not found. Creating from template...');
    if (fs.existsSync('.env.example')) {
      fs.copyFileSync('.env.example', '.env');
      console.log('‚úÖ Created .env file from template');
      console.log('‚ö†Ô∏è  Please update .env with your private key and API keys');
    } else {
      console.log('‚ùå .env.example not found. Please create .env file manually');
    }
  }

  // Check if node_modules exists
  if (!fs.existsSync('node_modules')) {
    console.log('üì¶ Installing dependencies...');
    await runCommand('npm install', 'Installing dependencies');
  }

  // Check if contracts are compiled
  if (!fs.existsSync('artifacts')) {
    console.log('üî® Compiling contracts...');
    await runCommand('npm run compile', 'Compiling contracts');
  }
}

async function deployInfrastructure() {
  console.log('\nüèóÔ∏è  Step 1: Deploying Core Infrastructure\n');
  
  // Deploy to local network first for testing
  console.log('üìç Deploying to local network...');
  await runCommand('npm run deploy:local', 'Local deployment');
  
  // Deploy to testnets
  console.log('üåê Deploying to testnets...');
  await runCommand('npm run deploy:polygon', 'Polygon Mumbai deployment');
  await runCommand('npm run deploy:arbitrum', 'Arbitrum Sepolia deployment');
  await runCommand('npm run deploy:optimism', 'Optimism Sepolia deployment');
  
  console.log('‚úÖ Infrastructure deployment completed');
}

async function testBridgeIntegration() {
  console.log('\nüåâ Step 2: Testing Bridge API Integration\n');
  
  await runCommand('npm run bridge:test', 'Bridge API testing');
  
  console.log('‚úÖ Bridge integration testing completed');
}

async function startCostMonitoring() {
  console.log('\nüìä Step 3: Starting Cost Monitoring\n');
  
  // Start monitoring in background
  console.log('üìà Starting cost monitoring service...');
  const monitoringProcess = execSync('npm run start:monitoring', { 
    encoding: 'utf8', 
    stdio: 'pipe',
    detached: true 
  });
  
  console.log('‚úÖ Cost monitoring started');
  console.log('üí° Monitoring will continue in background');
}

async function runIntegrationTests() {
  console.log('\nüß™ Running Integration Tests\n');
  
  await runCommand('npm run bridge:test', 'Full integration testing');
  
  console.log('‚úÖ Integration tests completed');
}

async function showDeploymentSummary() {
  console.log('\nüìã Deployment Summary\n');
  
  // Read deployment files
  const deploymentsDir = 'deployments';
  if (fs.existsSync(deploymentsDir)) {
    const files = fs.readdirSync(deploymentsDir);
    
    console.log('üìç Deployed Networks:');
    files.forEach(file => {
      if (file.endsWith('.json')) {
        const network = file.replace('.json', '');
        console.log(`   ‚úÖ ${network}`);
      }
    });
  }
  
  console.log('\nüéØ Cost Targets:');
  console.log('   ‚Ä¢ Target Cost: $0.01-0.02 per swap');
  console.log('   ‚Ä¢ Batch Processing: 60-80% cost reduction');
  console.log('   ‚Ä¢ Route Optimization: Automatic cheapest route selection');
  
  console.log('\nüåâ Bridge Integration:');
  console.log('   ‚Ä¢ Constellation: Free bridge (0 cost)');
  console.log('   ‚Ä¢ LayerZero: $0.012 base fee');
  console.log('   ‚Ä¢ Multichain: $0.01 base fee');
  console.log('   ‚Ä¢ Stargate: $0.015 base fee');
  
  console.log('\nüìä Monitoring:');
  console.log('   ‚Ä¢ Real-time cost tracking');
  console.log('   ‚Ä¢ Automatic optimization triggers');
  console.log('   ‚Ä¢ Bridge performance analysis');
}

async function main() {
  try {
    // Step 0: Check prerequisites
    await checkPrerequisites();
    
    // Step 1: Deploy infrastructure
    await deployInfrastructure();
    
    // Step 2: Test bridge integration
    await testBridgeIntegration();
    
    // Step 3: Start cost monitoring
    await startCostMonitoring();
    
    // Step 4: Run integration tests
    await runIntegrationTests();
    
    // Step 5: Show summary
    await showDeploymentSummary();
    
    console.log('\nüéâ Quick Start Completed Successfully!');
    console.log('\nüìö Next Steps:');
    console.log('   1. Review deployment logs in deployments/');
    console.log('   2. Test swaps using the frontend interface');
    console.log('   3. Monitor cost performance with npm run cost:analyze');
    console.log('   4. Check optimization triggers and bridge performance');
    console.log('   5. Deploy to mainnet when ready');
    
    console.log('\nüîó Useful Commands:');
    console.log('   ‚Ä¢ npm run bridge:test - Test bridge integration');
    console.log('   ‚Ä¢ npm run cost:analyze - Analyze cost performance');
    console.log('   ‚Ä¢ npm run start:monitoring - Start cost monitoring');
    console.log('   ‚Ä¢ npm run security:coverage - Run security analysis');
    
  } catch (error) {
    console.error('\n‚ùå Quick Start Failed:', error.message);
    console.log('\nüîß Troubleshooting:');
    console.log('   1. Check your .env file configuration');
    console.log('   2. Ensure you have sufficient testnet tokens');
    console.log('   3. Verify network connectivity');
    console.log('   4. Check deployment logs for specific errors');
    
    process.exit(1);
  }
}

// Run if this file is executed directly
if (require.main === module) {
  main();
}

module.exports = { main }; 